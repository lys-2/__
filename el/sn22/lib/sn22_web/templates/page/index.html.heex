
<p style=" background-image:
 linear-gradient(to left, HoneyDew, gray, black, gray);">
<a href="/sn-cli.exe"><span >``–≤–∏–Ω``</span></a>
<%# <a href="https://aka.ms/vs/17/release/vc_redist.x64.exe" ><span > |-–ª–∏–±—ã`</span></a> %>
<span >_‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî - ‚Äî‚Äî‚Äî‚Äî</span> 
<a title="" href="https://donate.qiwi.com/payin/sunraylmtd" ><span >
   –ø–æ–¥–¥–µ—Ä–∂–∫–∞   
 </span></a> 

<a href="https://github.com/lys-2/aa" ><span >``  –∫–æ–¥ </span></a> 

    <span onclick="document.documentElement.requestFullscreen()" 
    style="   height:80px;
    width:200px; float: right;">—ç–∫—Ä</span>

<br>
<a href="/sn.apk"><img src="/images/qr.png" alt="qr code" 
style=" display:inline-flex; width:32px; height:32px; image-rendering: pixelated;"><span >_–∞–Ω–¥___ _</span></a>

<span style="font-size: 12px;"><%=inspect :calendar.seconds_to_daystime(div(
  :erlang.statistics(:wall_clock) |> elem(0), 1000))%></span>
     <%# <span id="q">–ô</span>
     <span id="w">–¶</span>
     <span id="e">–£</span>
     <span id="r">–ö</span> %>
<span><%= 
mb = Process.whereis(:mb)
p = mb |> Process.info(:messages) |> elem(1)
tw = Process.whereis(:tw)
send(tw, {self, "rc"}); 
  receive do rc -> rc end
 |> inspect %></span>


 <span style="font-size: 12px;"><%= @conn.remote_ip |>
 put_elem(0, "*") |> inspect %></span>

<span><meter low="0" high="33" max="49"
  value={p |> length}>B</meter></span>

<span id="rq">...</span>


<br>
<canvas style=" width:960px;
    height:540px; float: right; 
     image-rendering: pixelated;
    position: absolute; top: 150px; right: 0px;
   " id="canvas"></canvas>
<span><img style="filter: grayscale(100%);" onclick="document.documentElement.requestFullscreen()" src="/images/pic.png" alt="a picture" style="opacity: 0.4; transform:
 translateX(11px) translateY(3px) rotate(-2deg); display:inline; width:442px;
 height:56px; image-rendering: pixelated;">
</span>

<span style="display:inline;" id="load">...</span>

</p>

<p>
<form action="/p" method="GET" >
  <span>
    <label for="say">  </label>
    <%# <textarea name="text"></textarea> %>
    <input type="text" size="8" name="say" id="say" placeholder="..."  maxlength="99">
  </span>

  <span>
    <button>–û—Ç–ø—Ä</button>
  </span>
  
  <%= 

for e <- p do %>

    <span><%= "üåΩ" %></span>  . ~

<% end %>

</form>
<div style="font-size: 24px;" id="messages" role="log" aria-live="polite"></div>
<input id="chat-input" type="text">

<span><%= send(tw, {self, 1});

 aaa = receive do {n,{{y,mn,d},{h,min,sec}},ch,sc,m} -> 
   [n,y,mn,d,h,min,sec,ch,sc,m]
   nil -> [0]
    end; inspect aaa %></span>
<br>



<canvas id="myCanvas" width="960" height="540"></canvas>
</p>

  <%= for e <- 1..16 do %>
    <pre style=" transform: rotate(0.05deg); font-size: 16px; margin-top: -20px; position: relative; top: -540px;
 left: 30px; font-family:monospace;"><%=
 Agent.get M3, fn s -> s end
  %></pre>
<% end %> 


 <%= for e <- 1..16 do %>
    <pre style={" font-size: 16px; margin-top: -20px; position: relative; top: -780px;
 left: 21px; font-family:monospace;"<>
 "color: "<>
 Enum.random ["Orange", "Green", "Tomato", "SpringGreen", "#372248", "#171123"]
 
 }><%=

  " ~   ~     ~~  ~ ``                                      ` ~ `` ~ "
  %></pre>

<% end %>

<pre id="place"style=" transform: rotate(-3deg); margin-top: -20px; position: relative; top: -880px;
 left: 30px; font-family:monospace;" ></pre>

<p id="m2" style="position: relative; top: -1250px;">
 <%= for e <- aaa do %>
 <span style={"font-family:monospace;
 position: relative; top: -1px;
  transform: rotate("<>
 "#{:rand.uniform(6)-3}"
 <>"deg); display:inline-block;
   font-size: "
   <>
 "#{:rand.uniform(18)+12}"
 <>"px; "<>
 "color: "<>
 Enum.random ["Orange", "Tomato", "SpringGreen"]}>
 
 <%= e %></span>
<% end %> 
</p>
<%= live_render(@conn, Sn22Web.V1) %>

####################

<%= render(Sn22Web.PageView, "sm.html", conn: @conn) %>

##################################

<p hidden>–í–ª–∞–¥–∏–º–∏—Ä –ì—Ä–∞–¥—É—Å–æ–≤, –ú–æ—Å–∫–≤–∞, 2022</p>


<script src="1.js" ></script>
<script>
var c = document.getElementById("myCanvas");
var ctx = c.getContext("2d");



// Create gradient
var grd = ctx.createRadialGradient(0, 0, <%= Enum.random(111..311) %>, 900, 600, 100);
grd.addColorStop(0, "black");
grd.addColorStop(1, "gray");

// Fill with gradient
ctx.fillStyle = grd;
ctx.fillRect(11, 0, 960, 540);

ctx.beginPath();
ctx.arc(0, 0, 0, 1111, 0.4 * Math.PI/3);
ctx.stroke();

let count = 1;

 setInterval(function() {
  if (count <33)
 { count++;
ctx.beginPath();
ctx.arc(
  <%= Enum.random(0..960) %>, 
  <%= Enum.random(0..540) %>+count/3,
   <%= Enum.random(0..1000) %>/count,
    10, 3  * Math.PI);
ctx.stroke();
 }
 if (count==2) {
  count++
e = engine.startGame({ onProgress: printProgress })

document.getElementById("load").style.background = "green"

e.then(() =>
 document.getElementById("load").style.background ="gray",
);
e.then(() => 
document.getElementById("load").innerHTML = "______"
);

 }

}, 125-count*2);


///////////////////////////////////////

const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
console.log(audioCtx)
// Create an empty three-second stereo buffer at the sample rate of the AudioContext
const myArrayBuffer = audioCtx.createBuffer(2, audioCtx.sampleRate *
 <%= Enum.random(1..10)/100 %>, audioCtx.sampleRate);

// Fill the buffer with white noise;
// just random values between -1.0 and 1.0
for (let channel = 0; channel < myArrayBuffer.numberOfChannels; channel++) {
  // This gives us the actual ArrayBuffer that contains the data
  const nowBuffering = myArrayBuffer.getChannelData(channel);
  for (let i = 0; i < myArrayBuffer.length; i++) {
    // Math.random() is in [0; 1.0]
    // audio needs to be in [-1.0; 1.0]
    nowBuffering[i] = Math.random() * 0.1 - 0.05;
  }
}
///////////////////////
// Get an AudioBufferSourceNode.
// This is the AudioNode to use when we want to play an AudioBuffer
const source = audioCtx.createBufferSource();
// set the buffer in the AudioBufferSourceNode
source.buffer = myArrayBuffer;
// connect the AudioBufferSourceNode to the
// destination so we can hear the sound
source.connect(audioCtx.destination);
// start the source playing
// source.start();


////////////////////
var xhttp = new XMLHttpRequest();
function req() {
  xhttp.open("GET", "rq?time="+Date.now(), true);
  xhttp.send();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
     document.getElementById("rq").innerHTML =
      Date.now()-this.responseText.slice(1, -1)+" –º—Å";

    }
  };
  setTimeout(req, 3000);
}

setTimeout(req, 250);


//////////////

function up1(s) {

  var d = document.getElementById("place");
  var str = [];

  for (let i = 1; i < 64*16+1; i++) {
      if (s.includes(i)) {

          str.push("a")
      } else {
          str.push(' ');
      }
      if (i%64==0) {str.push("\n")}
      d.innerText = str.join(" ") 
  }

}
function up() {
  var req1 = new XMLHttpRequest();
  req1.open("GET", "rq1", true);
  req1.send();  
  req1.onreadystatechange = function() {

if (this.readyState == 4 && this.status == 200) {

  up(this.responseText)
  
}

}
setTimeout(up(), 3000);
}



up1(<%= M2.get %>);
<%# setTimeout(up(), 3000); %>


/////////////

        
        

				const GODOT_CONFIG = {
          "canvas":"myCanvas",
			"args":[],"canvasResizePolicy":0,"executable":"1",
			"experimentalVK":false,
			"fileSizes":{"1.pck":
      <%= %{size: size} = File.lstat! "priv/static/1.pck"; size %>,
      "1.wasm":
      <%= %{size: size} = File.lstat! "priv/static/1.wasm"; size %>
      },
			"focusCanvas":false,"gdnativeLibs":[]};

    var engine = new Engine(GODOT_CONFIG);

    function printProgress(current, total) {
         document.getElementById("load").innerHTML =
      "–ó–∞–≥—Ä—É–∂–µ–Ω–æ " + current + " –∏–∑ " + total + " –±–∞–π—Ç.";
      }



</script>

<%# <progress value="70" max="100"> bar</progress> %>


 <%# <%= Poison.encode!(%{"a" => 33, "n" => "s d"})  %> 
